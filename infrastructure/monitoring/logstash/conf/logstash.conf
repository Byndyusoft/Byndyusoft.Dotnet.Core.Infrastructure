input {
  udp {
    port => 5000
    type => docker
  }
  udp {
    port => 5001
    type => rabbitmq
  }
}


filter {  
  if [type] == "docker" {
  grok {
		match => { "message" => "%{SYSLOG5424PRI}%{NONNEGINT:ver} +(?:%{TIMESTAMP_ISO8601:ts}|-) +(?:%{HOSTNAME:service}|-) +(?:%{NOTSPACE:containerName}|-) +(?:%{NOTSPACE:proc}|-) +(?:%{WORD:msgid}|-) +(?:%{SYSLOG5424SD:sd}|-|) +%{GREEDYDATA:msg}" }
	}
	syslog_pri { }
	date {
		match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
	}

	mutate {
		remove_field => [ "message", "priority", "ts", "severity", "facility", "facility_label", "severity_label", "syslog5424_pri", "proc", "syslog_severity_code", "syslog_facility_code", "syslog_facility", "syslog_severity", "syslog_hostname", "syslog_message", "syslog_timestamp", "ver" ]
	}
	mutate {
		remove_tag => [ "_grokparsefailure_sysloginput" ]
	}
	mutate {
		gsub => [
			"service", "[0123456789-]", ""
		]
	}
	if [msg] =~ "^ *{" {
		json { 
			source => "msg" 
		}
		if "_jsonparsefailure" in [tags] {
			drop {}
		}
		mutate {
			remove_field => [ "msg" ]
		}
	}
	if ("" in [msg]) {
		mutate {
			rename => { "msg" => "message" }
		}
	}	
   mutate {
		remove_field => [ "tags" ]
	}
  	   if ![ServiceName] {
			  mutate {
                           add_field => {
                           "ServiceName" => "%{[Properties][ServiceName]}"
                           }
					     }
			  }
  }
} 

filter {
  if [type] == "rabbitmq" {
  multiline { 
        pattern => "^%{SYSLOG5424PRI}%{NONNEGINT:ver} +(?:%{TIMESTAMP_ISO8601:ts}|-) +(?:%{HOSTNAME:service}|-) +(?:%{NOTSPACE:containerName}|-) +(?:%{NOTSPACE:proc}|-) +(?:%{WORD:msgid}|-) +(?:%{SYSLOG5424SD:sd}|-|)%{SPACE}%{TIMESTAMP_ISO8601}"
        negate => true
        what => "previous"
		stream_identity => "%{containerName}" 
    } 
   grok {
            match => { "message" => "%{SYSLOG5424PRI}%{NONNEGINT:ver} +(?:%{TIMESTAMP_ISO8601:ts}|-) +(?:%{HOSTNAME:service}|-) +(?:%{NOTSPACE:containerName}|-) +(?:%{NOTSPACE:proc}|-) +(?:%{WORD:msgid}|-) +(?:%{SYSLOG5424SD:sd}|-|) +%{GREEDYDATA:msg}" }		
           } 
  mutate { 
                      gsub => [ "msg", "<\d+>1.*? - -\s", ""] 
                  } 
   grok {
           match => { "msg" => "^%{TIMESTAMP_ISO8601:ts} \[%{LOGLEVEL:level}\] %{GREEDYDATA:loginfo}"  }
           }
	 
      syslog_pri { }
      date {
            match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      }
      mutate {
            remove_field => [ "message", "priority", "ts", "severity", "facility", "facility_label", "severity_label", "syslog5424_pri", "proc", "syslog_severity_code", "syslog_facility_code", "syslog_facility", "syslog_severity", "syslog_hostname", "syslog_message", "syslog_timestamp", "ver", "msg"]
      }
      mutate {
            remove_tag => [ "_grokparsefailure_sysloginput" ]
      }
      mutate {
            gsub => [
                  "service", "[0123456789-]", ""
            ]
      }
      if [msg] =~ "^ *{" {
            json {
                  source => "msg"
            }
            if "_jsonparsefailure" in [tags] {
                  drop {}
            }			
            mutate {
                  remove_field => [ "msg" ]
            }
      }
  }
}

output {
 stdout { codec => rubydebug }
 if [ServiceName] =~ ".*"
    {
         elasticsearch {
            hosts => ["elasticsearch:9200"]
            index => "%{ServiceName}-%{+YYYY.MM.dd}"
            }
   	}
	 else
    {
         elasticsearch {
            hosts => ["elasticsearch:9200"]
            index => "logstash-%{+YYYY.MM.dd}"
            }
    }
}