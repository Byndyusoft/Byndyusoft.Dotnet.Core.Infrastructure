<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.24">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.1"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.1">
      <jobProperties/>
      <triggers/>
      <parameters/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.54">
    <script>pipeline {
    agent { label &apos;master&apos; }
    stages { 
     stage(&apos;Save plugins&apos;) {  
        steps {
#            checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;infrastructure&apos;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &apos;credentialsId_char&apos;, url: &apos;https://repostitoryurl&apos;]]])
            sh &quot;ls -lat&quot;
            script {
                def newFile = new File(&quot;${env.WORKSPACE}/plugins.txt&quot;)
                PrintWriter printWriter = new PrintWriter(newFile)
                Jenkins.instance.pluginManager.plugins.each{
                  plugin -&gt; 
                    printWriter.println (&quot;${plugin.getShortName()}:${plugin.getVersion()}&quot;)
                    }
                printWriter.close()  
                }
        }
     }

    
     stage(&apos;Copy files &amp; push to bitbucket&apos;) {  

        steps {

            
           sh &apos;&apos;&apos;
# Create a directory for the job definitions
rm -rf infrastructure/jenkins/backup/
mkdir -p infrastructure/jenkins/backup/$(date \&apos;+%d-%b-%Y\&apos;)/$BUILD_ID/jobs

# Copy global configuration files into the workspace
cp $JENKINS_HOME/*.xml infrastructure/jenkins/backup/$(date \&apos;+%d-%b-%Y\&apos;)/$BUILD_ID/
# Copy keys and secrets into the workspace
cp $JENKINS_HOME/identity.key.enc infrastructure/jenkins/backup/$(date \&apos;+%d-%b-%Y\&apos;)/$BUILD_ID/
cp $JENKINS_HOME/secret.key infrastructure/jenkins/backup/$(date \&apos;+%d-%b-%Y\&apos;)/$BUILD_ID/
cp $JENKINS_HOME/secret.key.not-so-secret infrastructure/jenkins/backup/$(date \&apos;+%d-%b-%Y\&apos;)/$BUILD_ID/
cp -r $JENKINS_HOME/secrets infrastructure/jenkins/backup/$(date \&apos;+%d-%b-%Y\&apos;)/$BUILD_ID/
# Copy user configuration files into the workspace
cp -r $JENKINS_HOME/users infrastructure/jenkins/backup/$(date \&apos;+%d-%b-%Y\&apos;)/$BUILD_ID/
# Copy custom Pipeline workflow libraries
cp -r $JENKINS_HOME/workflow-libs infrastructure/jenkins/backup/$(date \&apos;+%d-%b-%Y\&apos;)/$BUILD_ID
find $JENKINS_HOME/jobs -depth | grep -v workspace | cpio -pdmv infrastructure/jenkins/backup/$(date &apos;+%d-%b-%Y&apos;)/$BUILD_ID/
mv infrastructure/jenkins/backup/$(date &apos;+%d-%b-%Y&apos;)/$BUILD_ID/var/jenkins_home/jobs infrastructure/jenkins/backup/$(date &apos;+%d-%b-%Y&apos;)/$BUILD_ID/
cp -r $JENKINS_HOME/nodes/ infrastructure/jenkins/backup/$(date &apos;+%d-%b-%Y&apos;)/$BUILD_ID/
# cp -r $JENKINS_HOME/plugins/*.jpi infrastructure/jenkins/backup/$(date &apos;+%d-%b-%Y&apos;)/$BUILD_ID/


tar czf jenkins-configuration.tar.gz infrastructure/jenkins/backup/$(date \&apos;+%d-%b-%Y\&apos;)/$BUILD_ID/
rm -rf infrastructure/jenkins/backup/$(date &apos;+%d-%b-%Y&apos;)/$BUILD_ID
git add -A
git commit -m &quot;Jenkins ${JENKINS_MASTER} config backup for $(date)&quot;
&apos;&apos;&apos;
# withCredentials([usernamePassword(credentialsId: &apos;credentialsId_char&apos;, passwordVariable: &apos;GIT_PASSWORD&apos;, usernameVariable: &apos;GIT_USERNAME&apos;)]) {
#    sh(&apos;git push https://${GIT_USERNAME}:${GIT_PASSWORD}@repo.git HEAD:infrastructure&apos;)
 }
          
        }
    }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>